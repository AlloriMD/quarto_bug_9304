# Demonstration of figure cross-referencing bug

The following example will display several figures using different methods (so that these methods of figure presentation can be tested). At the bottom, each figure will be cross-referenced using the `@fig-id` notation. 

::: {.callout-important}
# Read more...
See GitHub [Issue 9304](https://github.com/quarto-dev/quarto-cli/issues/9304) for a full description of the bug report.
:::

### Simple figure using Markdown notation {.unnumbered}

This figure is specified using the `![text](filepath){#fig-id}` notation.

![A simple image. Source: [xkcd 1739](http://xkcd.com/1739) (CC-BY-NC 2.5)](../_figures/xkcd_1739.png){#fig-simple-image width=250}


### Markdown notation within a DIV {.unnumbered}

This figure is specified using the following notation:

```
::: {#fig-id}
  ![text](filepath)
  Caption
:::
```

::: {#fig-image-within-div}
![Another simple image, within a DIV. Source: [xkcd 2456](http://xkcd.com/2456) (CC-BY-NC 2.5)](../_figures/xkcd_2456.png){width=250}

Another simple image, within a DIV.
:::


### Simple computational plot from a code chunk {.unnumbered}

This figure is generated using Python in a Quarto code chunk.

```{python}
#| label: fig-code-chunk
#| fig-cap: "Figure generated by running a code chunk."
#| echo: true

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

### Computational plot from a code chunk within a DIV {.unnumbered}

This figure is generated using R in a code chunk that is contained within a DIV.

::: {#fig-code-chunk-within-div width=150}

```{r}
#| echo: true

library(ggplot2)
mtcars2 <- mtcars
mtcars2$am <- factor(
  mtcars$am, labels = c('automatic', 'manual')
)
ggplot(mtcars2, aes(hp, mpg, color = am)) +
  geom_point() + geom_smooth() +
  theme(legend.position = 'bottom')
```
Figure generated from running a code chunk within a DIV.
:::


{{< pagebreak >}}
## Cross-referencing all the figure types

Now we will try to crossref each of them:

- **@fig-simple-image** -- *should appear as "Figure 1" (or "Figure 2.1")*
- **@fig-image-within-div** -- *should appear as "Figure 2" (or "Figure 2.2")*
- **@fig-code-chunk** -- *should appear as "Figure 3" (or "Figure 2.3")*
- **@fig-code-chunk-within-div** -- *should appear as "Figure 4" (or "Figure 2.4")*
- **@fig-fake-figure-id** -- *should not resolve because there is no such fig-id.*

If `_quarto.yml` lists the chapter paths using the `./_chapters/ch01.qmd` method, the crossrefs are not resolved properly, and you will see the figures listed above as "fig-id".

If `_quarto.yml` lists the chapter paths using the `_chapters/ch01.qmd` method, the crossrefs are resolved properly, and you will see the figures listed like "Figure 1", "Figure 2", etc.

The last figure is a cross-reference to a "fig-id" that does not exist, and thus should not resolve in either case.